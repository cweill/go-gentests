// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x6a\xc3\x40\x0c\x45\xaf\x22\x8c\x17\x2d\x18\x1d\xa0\xd0\x03\x78\x53\x4a\x5b\xda\xb5\x18\xcb\xae\xc0\x9e\x16\x8d\x92\x10\x84\xee\x1e\xc6\x38\x99\xd5\x87\x3f\x6f\xde\x97\xfb\xc4\xb3\x64\x86\x2e\xd1\xba\x76\x11\xee\x17\xb1\x5f\xc0\x0f\x4e\x2c\x67\xd6\xda\xc8\x0c\xf9\xcf\x00\xc7\xf2\x69\x7a\x4a\x16\x61\x86\xee\x9c\xa7\xfa\x7a\x27\x01\x23\x5a\x8b\x6f\xb4\x71\xc4\x93\xbb\x52\x5e\x18\x7a\x19\xa0\xe7\x15\x5e\x5e\x01\xdf\x49\x69\x63\x63\x2d\x87\xbd\x97\x88\x01\x1e\x7f\xdb\xde\x8f\x8a\xd5\x1b\xcc\x90\x74\x29\x4d\xbf\x2b\xea\xe2\x4e\xe3\xd7\xf5\x9f\x71\x2c\xdf\xa4\x42\x93\xa4\x08\xc4\xc6\xee\xf1\x7c\xe4\x2d\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x41\x4f\xc3\x36\x14\x3e\x27\xbf\xe2\x51\x01\x6a\xa7\x62\xee\x45\x3d\x0c\xc1\xa6\x1d\x46\xa7\x82\xc6\x61\x9a\x26\x93\xbe\x74\xd6\x5c\xa7\xb3\x5f\x40\x95\xe5\xff\x3e\xd9\x71\x12\x37\x4d\x51\x2f\xe3\x40\x9b\x17\xfb\x7d\x9f\xbf\xf7\x7d\x06\x6b\x37\x58\x0a\x85\x30\x29\x6b\x55\x90\xa8\xd4\xc4\xb9\xdc\xda\x3b\xb8\x2e\x61\xb1\x04\xe6\x5c\x9e\xfb\x57\x60\x2d\x7b\x43\x43\x2f\x7c\x87\xce\x4d\x09\x7e\x20\x34\x24\xd4\x96\xbd\xcd\xc0\xe6\x99\xdf\xf2\x25\xe8\x6f\x60\x6b\x2c\x50\x7c\xa2\x76\x2e\xcf\x42\x59\x94\xc0\x7e\x31\xaf\xa4\xeb\x82\x42\xb1\xab\xfe\x24\x50\x6e\x4c\x53\xcb\xe8\xb0\x47\x28\x43\x05\x4c\x58\xec\xfb\xc6\xd5\x9a\xab\x2d\x0e\x36\x64\xd6\x86\x67\x4f\x32\xd0\x3b\xec\x31\xbe\xf2\x5b\x50\x6d\xe2\x53\x87\xd9\x96\x92\xef\x83\xaf\x9e\x95\x3f\xe6\x6f\x5c\xf3\x1d\x12\xea\x00\x16\xa8\x71\xbd\x3d\x22\x96\xd0\x3a\xdd\x11\x00\x43\xe9\x84\x5d\x82\x78\x8c\xef\x05\x35\x5e\xf4\x3f\xfe\x4c\x60\x14\xdf\xa1\x87\x15\x6a\x1b\x37\x8f\xc8\xdc\x72\xe7\x6a\xd3\x6b\x3d\x90\x2b\x4a\xdb\x7c\x74\x8a\x48\xd3\x6b\xd6\xb6\x3c\x15\xf4\x8c\x78\xdf\x48\x96\x65\x41\x2f\xff\x6b\x64\x4f\xa2\xdb\x1a\x4d\x2d\xc9\xb4\x38\xef\x5c\xd1\x77\x92\x75\x90\x6b\xa4\x5a\x2b\xf3\xac\x75\x15\x35\xf8\xe2\x8a\x9e\xb5\x86\x8f\xaa\x92\x03\x9d\xbd\x90\xf7\xf7\xf0\xb6\x7a\x5a\x2d\xe0\xc7\xcd\x06\xbc\xd6\x50\x70\x83\x86\x85\x31\x94\x95\x06\x6b\x45\x09\xaa\x22\xaf\xe0\x0b\xff\x07\x37\xce\xc1\x5f\x73\x20\xf2\x33\xb1\x36\xf4\x8a\xcc\x9b\x51\xd9\x1c\xe2\x4f\x4b\xea\xb5\xfe\x68\x5e\x39\x47\x6c\x5d\xab\x29\x11\xf3\x03\x9c\x83\xcf\xd0\x30\x35\x10\x29\xc2\x5d\xaf\xf2\xd8\x70\xcf\xa4\xe8\x64\x64\x81\x66\x18\xc7\x61\x8f\x61\x31\xd7\xce\xdd\x46\xea\x51\x50\xf6\x3b\x97\x35\x3a\x67\xdb\x16\x67\xc2\x95\x59\xcb\x9a\xb0\x2f\x80\x88\x35\xb6\x61\x49\xe4\xe6\x7d\x83\x3e\x6a\xd9\x48\xfe\x4e\x1e\x22\xde\x48\x62\xda\x63\xbe\x6b\x41\xdd\xe9\x8f\x92\xb4\x58\xc2\xed\xc7\x81\xd0\xb0\xc7\xba\x2c\x51\xdb\x4b\x00\x63\x32\xa6\x61\xb8\x2b\x25\x0f\xa9\x79\x66\xa7\xf5\x95\xc2\xa0\xd2\x0c\x3a\x66\x84\xbb\xbd\xe4\x84\x30\xd1\x8d\x61\x27\x70\x5d\x06\x9b\xf6\x6f\x0a\x2e\x65\x53\x3e\xc7\x62\xc4\xb5\x99\x28\xe3\xd4\x86\xc4\x9c\x03\xd4\xba\x99\xea\x18\xc8\x43\x67\xca\xa9\x5f\x77\xb5\x04\x25\xe4\xcc\x7f\x12\xb1\x36\x0c\x71\xcc\xc4\x42\xcb\x72\x3a\x49\x7b\xed\xd0\x18\xbe\xc5\x78\x94\x1b\xe3\xf1\x2a\x0d\x4b\xb8\xf9\x9c\x43\xdb\xe1\xe6\x73\xe2\x43\x10\x7d\x9c\x6e\x17\x6a\x5f\x77\x42\xa0\xd6\xf3\x04\x78\xd6\xbb\xa3\xbd\x20\x8e\x92\x1e\xde\x0d\x22\xa3\xc3\xe1\xad\x6d\x2e\xa5\xa2\x52\x24\x54\x8d\xf1\x90\x63\x6e\xfb\xd6\x5e\xa7\x90\xe7\xfc\x15\x26\xf0\x73\x45\x7d\x88\x3a\xbf\xb1\xd7\x70\xf3\x4e\x67\x0f\xc9\x92\x46\xe1\xf4\xae\xea\x3d\x28\x0d\x46\x8c\x47\x6e\x44\x91\xfc\x4d\xea\x06\x7d\x5d\x8e\x79\xcd\x07\xf4\x88\x43\xaa\xb3\x14\x0a\x87\x43\xbf\x98\xcf\xff\x84\x7f\xa5\xb1\x94\x58\x10\x7b\x42\xdc\x3f\xff\x5b\x73\x39\xed\x3a\xcc\x8f\x09\xcd\x52\x46\xdd\xf4\x2e\xf4\x64\xcb\x39\xf2\xfd\xb5\x96\x24\xf6\xf2\x88\x6f\xa4\xd4\xfb\xf6\x52\xd3\x9e\x25\x7c\xfe\xff\x86\x81\x67\xc1\x1f\x2e\xbd\xc6\x5d\xee\xf2\xbc\xf5\xec\x7f\x01\x00\x00\xff\xff\xe4\x06\x71\x76\x5f\x09\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2399, mode: os.FileMode(420), modTime: time.Unix(1492289196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xb1\xa4\xd2\x66\x2f\x61\x65\x23\x5e\x61\x70\x9f\x49\x90\x99\x84\x75\xbb\xc7\xbb\xbb\x90\x05\xb5\xfb\x99\xe1\x7b\x64\xc5\x73\x0d\xe4\x69\x81\x55\xb4\x49\x4a\x64\xb3\x98\x91\xcb\x65\x73\x47\xf4\xb7\x44\x96\xe3\x81\xa8\x52\xda\xed\xf1\xb2\x19\x99\x2c\xf7\x91\x52\x4a\xab\xef\x5b\xeb\xf9\xf4\xf3\xd7\xe3\x32\xf8\xcd\x1c\xd2\x20\x7d\xf9\x1b\x3b\x7f\xeb\x13\x00\x00\xff\xff\x18\xfd\x24\x71\x8c\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 140, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0a\x02\x41\x0c\x45\xaf\x12\x96\x2d\x25\x07\x10\x3c\x80\x9d\xe0\x09\x22\x9b\x59\xa6\xd8\x28\x99\x6c\xf5\xc9\xdd\x65\x46\x8b\xa9\x12\x1e\xff\xbf\x0f\x6c\x5a\xaa\x29\x2d\xd5\x3e\x67\xb4\x25\x13\x58\x0b\x5d\x6f\xc4\xfd\xad\x85\xec\x1d\xc4\xcf\xf3\x15\xda\xa2\x65\x46\xb0\xc9\xa1\x17\x02\xd4\xb6\x7f\x66\x2d\xfc\xf0\x6a\x71\x1f\x92\x0e\x5d\x6c\xd7\xc1\xc5\xe5\xd0\x50\xff\x75\xc5\xf7\xc6\xc0\xa0\x7d\x62\xf2\xcc\xe7\x1b\x00\x00\xff\xff\x8e\xbc\xcf\xda\x98\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 152, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\xfb\x0c\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1492268250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

