// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x4b\x03\x41\x0c\x85\xef\xfd\x15\x8f\xb2\x87\x16\xda\x80\x57\xc1\x1f\xd0\x8b\x88\x16\x3d\x0f\xbb\x69\x0d\x6c\xa7\x92\x89\x8a\x84\xfc\x77\x99\xc5\x6e\xb7\x58\x3d\x26\xef\x7d\x6f\x5e\xc6\xbd\xe3\x9d\x64\xc6\xbc\x4d\x7d\x3f\x8f\x98\x01\x80\xfb\x1a\x9f\x62\xaf\xa0\x47\x6e\x59\x3e\x58\xb1\xfe\x91\x4e\xb2\xec\x90\x8f\x06\xda\x94\x27\xd3\xf7\xd6\x10\x61\x46\xee\xe0\xdc\xfd\x32\x8f\x29\x84\x08\x1a\x9f\x98\x5a\xeb\x4c\xf7\xe9\xc0\x75\xb3\x18\x57\x4d\x9f\x71\x7b\x87\x9e\x33\x68\xcb\xc5\x1e\x92\xa6\x03\x1b\x6b\xb9\x20\x35\xe5\x3d\xa3\x91\x15\x1a\xee\x2b\x40\x57\x8c\x93\xea\x8d\x44\xac\xe0\x7e\xad\xec\xf9\xb2\x17\x15\x63\x1d\x0e\x4b\xba\x77\xaf\x0a\x0f\x95\x6e\x22\x0a\x0d\x78\xc4\x9f\x29\x38\xea\x39\x05\x8b\x13\xba\xac\x5e\xf7\xa1\x20\xe8\x1f\x9e\xb6\x5f\x6f\x4c\x9b\xf2\x9c\x54\x52\x27\x6d\x04\x11\x5d\xba\x27\xbf\xb8\x9c\x4d\x86\xef\x00\x00\x00\xff\xff\x97\x71\xbb\x81\xd7\x01\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc1\x8e\xdb\x36\x10\x3d\x4b\x5f\x31\x31\x36\x81\x54\x38\x0c\x7a\xdd\xc0\x87\x06\xd9\x16\x3d\x34\x2e\xbc\x8b\xe6\x50\x14\x05\x57\x1e\xb9\x44\x69\xca\x25\x47\x1b\x18\x04\xff\xbd\x20\x45\x49\x94\x2c\x6f\x7d\xa9\x0e\x2b\x71\x38\x9c\x79\xf3\xe6\x0d\xd7\xd6\xee\xb1\x16\x0a\x61\x55\xb7\xaa\x22\xd1\xa8\x95\x73\xb9\xb5\xef\xe1\xae\x86\xfb\x0d\x30\xe7\xf2\xdc\x6f\x81\xb5\xec\x09\x0d\x7d\xe1\x47\x74\xae\x20\xf8\x8e\xd0\x90\x50\x07\xf6\x54\x82\xcd\x33\x7f\xe4\x9b\xa0\xbf\x80\xed\xb0\x42\xf1\x82\xda\xb9\x3c\x0b\x66\x51\x03\xfb\xd9\x3c\x92\x6e\x2b\x0a\xc6\xc1\xfa\xa3\x40\xb9\x37\x9d\x2d\xa3\xf3\x09\xa1\x0e\x16\x30\xc1\xd9\xc7\x8d\xde\x9a\xab\x03\xce\x0e\x64\xd6\x86\xb5\x07\x19\xe0\x9d\x4f\x18\xb7\xfc\x11\x54\xfb\xb8\x1a\x72\xf6\xa6\xe4\x7b\xf6\x29\x6a\x38\x10\x14\x12\x15\x84\x72\x7f\xe5\x9a\x1f\x91\x50\x9b\x12\xbe\xf7\x4e\x01\x25\xd7\x87\x09\xc6\x04\xe1\xf4\xd0\x00\x27\x98\x2e\x80\x26\xc9\xa7\x50\x3c\xb7\xc6\xf3\xff\xfb\x1f\x49\x1a\xc5\x8f\xe8\xd3\x0a\x75\x88\x87\x17\x18\xef\xcb\xe0\x6a\x3f\xd2\x3e\x63\x2e\xb2\xdc\xbd\x06\x72\xa4\x19\xe9\xeb\x43\x5e\x72\xbb\xcc\x23\xc4\xe7\x26\x0e\xb3\x2c\x10\xe8\xff\xe4\x63\x6e\x08\x5b\x5d\x88\x6b\x64\x42\xf2\x70\x7d\x48\x90\x8d\xf6\x05\x80\x30\x2c\x92\xc0\x3b\x34\xad\x24\xd3\x57\xf5\x95\x2b\x7a\xad\x41\x83\x68\x77\x48\xad\x56\xe6\x41\xeb\x26\x32\xfe\x8d\x2b\x7a\xd0\x1a\x9e\x9b\x46\xce\xba\x6a\x07\x60\x1f\x3e\xc0\xd3\xf6\xf3\xf6\x1e\x7e\xd8\xef\xc1\xf7\x17\x2a\x6e\xd0\xb0\xd0\xfa\xba\xd1\x60\xad\xa8\x41\x35\xe4\xbb\xf6\x85\xff\x8d\x7b\xe7\xe0\xcf\x35\x10\x79\x1d\x58\x1b\x22\x46\xfc\x9d\x3c\xec\x9c\x75\xf6\xd8\x3e\x77\x5b\xce\x11\xdb\xb5\xaa\x20\x62\x5e\x34\x6b\xf0\x23\x3c\x1f\xda\x9e\x29\x78\x3f\x76\x76\x49\x50\x57\x86\xf8\x42\x26\x01\xa6\xf7\xf3\xf4\x05\x67\xae\x9d\x7b\x17\xa1\x47\x5a\xd9\x6f\x5c\xb6\xe8\x9c\xed\x43\x5c\x99\xed\xcc\x5a\xd6\xdd\x35\xf7\x40\xc4\x3a\xa9\xb2\x64\xe2\xd7\x63\x80\x71\xd2\xb3\x85\xf1\xbf\x58\xc4\x7c\x0b\x53\xda\x97\xf9\x55\x0b\x1a\xaa\x9f\x4c\xef\xfd\x06\xde\x3d\x9f\x09\x0d\xfb\xd4\xd6\x35\x6a\x7b\x4b\xc2\x38\x8d\x45\x68\xee\x56\xc9\x73\x2a\xa1\xf2\xd2\xbe\x55\x18\x58\x2a\x61\x40\x46\x78\x3c\x49\x4e\x08\x2b\xdd\xc9\x76\x05\x77\x75\x10\xeb\xb8\x53\x71\x29\x3b\xf3\x35\x14\x0b\xda\xcd\x44\x1d\xbb\x36\x07\xe6\x1c\xa0\xd6\x5d\x57\x97\x92\x7c\x1c\x44\x59\x78\xbf\x37\x1b\x50\x42\x96\xfe\x4d\xc4\xfa\x91\x88\x6d\x26\x16\x42\xd6\xc5\x2a\x8d\x75\x44\x63\xf8\x01\x63\x29\xe8\x3d\x60\x03\x6f\x5f\xd6\xd0\x1f\x7f\xfb\xb2\x5a\x4f\xd2\x0b\x75\x6a\x87\xe2\x51\xeb\x75\x92\xac\x1c\x15\x11\x54\x38\x9f\xf1\xb0\x37\x1b\x13\x1d\x0a\xb6\xb6\xbb\xfc\xaa\x46\x91\x50\x2d\xc6\xc2\x96\x14\xf6\xaa\xa4\x2e\x53\x5e\xd3\x54\x60\xfd\xa7\x86\xc6\xc1\x19\x34\xc6\x1e\xc3\x0d\x5f\x94\x1f\x13\x97\x8e\xd5\xf4\x96\x1a\x75\xe7\xef\xce\x2e\xc7\x27\x6e\x44\x95\xfc\x1b\x1c\x9a\x7b\x57\x2f\xe9\xcb\x0f\xe5\x04\x43\xca\xb3\x14\x0a\xe7\x8d\xbe\x19\xcf\xff\x94\xff\x8d\xc6\x5a\x62\x45\xec\x33\xe2\xe9\xe1\x9f\x96\xcb\x62\x88\xb0\x9e\x02\x2a\x53\x44\x43\xf7\x6e\xd1\x61\x0f\x38\x82\xfd\xa5\x95\x24\x4e\x72\x02\x36\xe2\x19\xb5\xfa\x1f\x42\xbd\x0a\xf2\xfa\xcf\x93\x99\x4e\xc1\x17\x94\x5e\xd7\x2e\x77\x79\xde\xeb\xf4\xdf\x00\x00\x00\xff\xff\x7e\x2c\x20\xd8\xc6\x09\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2375, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\xdd\xa7\xb0\x3a\xc1\x40\x2e\xc1\xc4\x82\xb8\x82\x45\x1e\x6d\x85\xe2\x56\x21\x9b\xf5\xee\x8e\x94\x08\xba\xfd\xb2\xf5\xbe\x88\x8c\xd7\xea\xd0\x69\x81\x65\xd4\x89\x94\x88\x6a\x3e\x43\xd3\x75\x2b\x05\xde\x3e\x64\x44\xea\x0f\x78\xd6\x0b\x29\xbb\x3d\xdf\x36\x43\x23\xd2\x63\x24\x29\xb2\x96\x7d\xab\x4d\x4f\x87\x70\xeb\x97\x01\xdc\xad\x80\x1c\x93\xb6\xfc\x38\x52\xce\xff\xfa\x06\x00\x00\xff\xff\xc6\xcc\xc3\x3d\x8e\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 142, mode: os.FileMode(438), modTime: time.Unix(1532204404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\x7e\xc5\x50\x7a\x50\x68\x03\x5e\x05\x3f\xc0\x9b\xa0\x3f\x10\xe9\xa6\x04\xda\x55\x93\xed\x69\xe9\xbf\x4b\x53\xaa\xa9\x9a\x53\xb2\xf3\xb2\x33\xa3\xda\x90\xf3\x4c\x28\x3c\x3f\x06\x89\x05\xea\x71\xdc\x00\x80\x6a\x8d\xd2\xe1\x70\x84\x59\xcd\xbc\x03\xdf\x05\xe6\x32\xdc\x84\xa2\xc4\x49\x14\x31\x6c\x7b\xaa\xa0\x4a\xdc\x7c\xe3\xa5\x33\xe7\xe0\x59\x4e\xc9\xe1\xad\x2e\x44\xb0\xdc\x52\x82\x6c\xb0\x3d\x09\x85\x98\x11\xd9\x1e\x7a\x62\xdb\x11\x4f\xe8\x95\xa2\x7c\xf0\x1d\xf6\x48\x21\x6c\x68\x53\x86\x2e\xd2\xca\x66\x39\x33\x12\x8d\x6a\xfa\x3c\x37\xab\x7e\xbc\xf2\x0e\xff\x66\xf9\x3b\xbb\xbf\x02\x00\x00\xff\xff\xdc\xe5\x6f\xe4\x4c\x01\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 152, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x51\x4a\xc4\x40\x10\x44\xff\xf7\x14\xc5\x92\x05\x85\xdd\x3e\x80\xe0\x01\xfc\x91\x45\xc5\xff\xd1\x54\xd6\x86\xcd\x18\x67\x26\x11\x69\xfa\xee\x62\x48\x42\x82\x7f\x5d\x54\x75\xd5\x33\xab\xd9\x68\x24\xf6\x2d\x73\x0e\x17\xee\x71\x72\xdf\x01\x80\xd9\x09\xda\x20\x7e\x16\xc8\x73\xff\x56\x98\x4b\x76\x3f\x7c\x09\xcc\x18\xeb\x55\xea\x5b\xcb\x07\xe4\x89\xef\xd4\x81\x69\x29\x98\x6d\x79\xf9\xe9\x28\xaf\xe1\xda\xf3\xcf\x93\xe5\x8f\xb1\xde\xac\xc9\x63\x68\xc7\xc8\xcd\x1a\x40\xce\x49\x63\x79\x88\x5d\x5f\xf2\xbf\xee\x14\xe2\x85\xa8\xf4\x88\x8a\x57\xdc\xdd\x43\xce\x21\x85\x96\x85\x29\xbb\x9b\x69\x83\x4a\xdd\x8f\x33\xf3\x61\x18\x8f\xcd\xec\xa4\x6f\x77\x93\x70\xff\x0d\x00\x00\xff\xff\x73\x78\xe6\xa5\x16\x01\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x0a\xc2\x30\x10\x44\xef\x7e\xc5\x50\x72\x6c\xf3\x01\x82\x47\xf1\xde\x3f\x10\xba\x95\x40\x49\x60\x92\x9e\x96\xfd\x77\x09\x46\x1b\xf5\x3a\xfb\xe6\xed\xa8\x2e\xb2\x86\x28\x18\x28\x79\xdf\x4a\x1e\xcc\x4e\x00\xa0\x3a\x81\xf7\xf8\x10\xb8\x30\xc2\xc9\x86\xf3\x05\x7e\x7e\x41\x98\x1a\xf5\x26\xc3\x0a\x17\xcc\x46\xa8\x4a\x5c\xfe\xce\xb7\x54\xe0\x3f\x69\x4d\x7a\xaa\x09\xfc\x2c\x65\x67\xcc\x57\x32\xb1\xba\x84\xfc\xd6\x35\x30\xf1\x18\xf2\x53\xaa\x23\x8f\x4e\xf7\xe8\x19\x00\x00\xff\xff\x5d\x27\xa2\xc4\xe8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(438), modTime: time.Unix(1532202343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

