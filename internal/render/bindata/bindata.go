// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc6\x40\x0c\x84\xef\x3e\x45\xf8\xd9\x83\xc2\x4f\x1e\x40\xf0\xe0\xb1\x17\x11\x15\x3d\x87\x6d\xb6\x06\xda\x55\xb2\x51\x91\x90\x77\x97\xad\xb5\x05\x4f\x59\xb2\x33\xf3\x4d\xdc\x47\x2e\x52\x19\x4e\x99\xe6\xf9\x14\xe1\x9e\x0a\x5c\xdf\x00\xf6\xe7\x97\xd8\x2b\xe0\x03\x67\x96\x4f\xd6\xbe\x91\x02\xf5\xcd\x00\x87\xf6\x68\xfa\x91\x2d\xc2\x0c\xdd\xb9\x8e\xfd\xf7\x4f\xd9\xdd\xc7\x16\xef\x68\xe1\x88\x4b\x77\xa5\x3a\x31\x24\x39\x43\xe2\x79\xa5\xdc\x93\xd2\xc2\xc6\xda\xb6\xf4\x24\x11\x67\xd8\xbd\x07\xef\x45\xc5\x7a\x87\x95\xd7\x85\x05\x6f\x75\xda\x6b\x90\x4e\xed\x40\x6e\x63\x4d\xff\x3d\x45\x0a\xe0\xd3\xf7\x3b\xe3\xd0\x9e\x49\x85\x46\xc9\x11\x88\xff\x2c\x57\xdb\xbc\xf8\x09\x00\x00\xff\xff\xbe\x52\x80\x51\x18\x01\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 280, mode: os.FileMode(420), modTime: time.Unix(1510499678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x4d\x4f\x33\x37\x10\xc7\xcf\xd9\x4f\x31\x44\x80\x92\x2a\x98\x7b\x50\x0e\x20\x68\xd5\x43\x49\x15\x50\x39\x54\x55\x65\x36\xb3\xa9\x55\xc7\x9b\xda\xb3\xa0\xc8\xf2\x77\xaf\xec\xf5\xbe\x66\x37\x70\x79\x38\xb0\xbb\x7e\x99\xf9\xcd\xcc\x7f\x46\xb1\x76\x8b\x99\x50\x08\xd3\xac\x50\x29\x89\x5c\x4d\x9d\x4b\xac\xbd\x81\xcb\x0c\x96\x2b\x60\xce\x25\x89\xdf\x02\x6b\xd9\x2b\x1a\x7a\xe6\x7b\x74\x6e\x46\xf0\x13\xa1\x21\xa1\x76\xec\x75\x0e\x36\x99\xf8\x2b\x9f\x82\xfe\x01\xb6\xc1\x14\xc5\x07\x6a\xe7\x92\x49\x58\x16\x19\xb0\x5f\xcd\x0b\xe9\x22\xa5\xb0\x58\xaf\xfe\x2c\x50\x6e\x4d\xb9\x36\xa1\xe3\x01\x21\x0b\x2b\x60\xc2\x61\x6f\x37\x9e\xd6\x5c\xed\xb0\x77\x61\x62\x6d\xf8\xf6\x90\x01\xef\x78\xc0\xb8\xe5\xaf\xa0\xda\xc6\xaf\xda\x67\xb5\xd4\x7a\xef\xbd\x7a\x2a\x1f\xe6\xef\x5c\xf3\x3d\x12\x6a\xd3\x09\xe3\x5e\xef\x3a\x81\x04\x66\xae\x77\x5d\xe2\x16\xf0\x80\x2d\xbf\x1f\x96\x4e\xb9\x3b\xd8\xe3\xa0\x3e\xf3\xc6\x57\xe7\xcf\xbf\x5a\x6e\x15\xdf\xa3\xc7\x10\x6a\x17\x6f\x0e\xd4\xa3\x8a\x84\xab\x6d\x53\x94\x5e\x5e\x63\x0d\xca\x47\x8d\x25\x4d\x93\xdc\xca\xe4\xf9\x08\xfa\xef\x23\xb9\x1d\x48\x2e\x44\x4f\x21\xb3\xfe\xdf\x20\xc5\xf9\x24\x8f\x67\xb9\x9b\xe6\x73\xc4\x2d\xfb\x1b\x34\x85\xa4\x9a\xf8\x8d\x2b\x3a\xb1\x3c\x14\xf0\x06\xa9\xd0\xca\x3c\x69\x9d\xc7\x0a\x7c\x72\x45\x4f\x5a\xc3\x7b\x9e\xcb\xee\x25\xe7\xcb\x78\x7b\x0b\xaf\xeb\xc7\xf5\x12\xee\xb7\x5b\xf0\x95\x86\x94\x1b\x34\x2c\xf1\x82\xc8\x72\x0d\xd6\x8a\x0c\x54\x4e\xbe\x7e\xcf\xfc\x5f\xdc\x3a\x07\x7f\x2f\x80\xc8\x2b\xc2\xda\x60\x2b\x92\x97\x42\xb1\x09\xc4\xbf\x0a\xea\xa5\x78\x2f\xb7\x9c\x23\xb6\x29\xd4\x8c\x88\x79\xf9\x2c\xc0\xb7\x7a\xbf\xb9\x21\x22\xc2\x4d\x93\xb1\x21\x69\x8d\x34\xfb\x89\x60\x02\x66\x10\xc3\xf1\x80\xe1\x30\xd7\xce\x5d\x47\xf4\x98\x50\xf6\x07\x97\x05\x3a\x67\x2b\x13\x23\x33\x60\x62\x2d\x2b\x67\xd2\x12\x88\x58\x29\x5a\xd6\x9a\x0c\x8b\xc6\x40\x33\x11\x26\x5f\x08\xa1\xed\x6f\xa0\x7d\xab\x30\xdf\xb4\xa0\x3a\xfa\x8e\xe0\x96\x2b\xb8\x7e\x3f\x12\x1a\xf6\x50\x64\x19\x6a\xfb\x1d\x87\xb1\x2f\x67\xa1\xb8\x6b\x25\x8f\x6d\xf1\xcc\x4f\xd7\xd7\x0a\x43\x96\xe6\x50\x93\x11\xee\x0f\x92\x13\xc2\x54\x97\x82\x9d\xc2\x65\x16\x64\xda\xec\xa4\x5c\xca\x72\x79\x8c\x62\x40\xb5\x13\x91\xc5\xaa\xf5\xc1\x9c\x03\xd4\xba\xac\xea\x90\x93\xbb\x5a\x94\x33\x7f\xee\x62\x05\x4a\xc8\xb9\x7f\x12\xb1\xaa\x19\x62\x99\x89\x05\x93\xd9\x6c\xda\xb6\xb5\x47\x63\xf8\x0e\x63\x28\xe8\x4f\xc0\x0a\xae\x3e\x16\x50\x5d\xbf\xfa\x98\x2e\x3a\xee\x85\x3a\x14\x75\xf0\xa8\xf5\xa2\xe5\x6c\xde\x28\xa2\x1a\x49\x9d\xee\x0e\x7b\xbd\x36\xd1\x21\x60\x6b\xcb\x01\x94\xe6\x8a\x84\x2a\x30\x06\x36\xa4\xb0\xb3\x92\x3a\x75\x39\xa6\xa9\x90\xf5\x5f\x72\x6a\x1a\xa7\xd6\x18\x7b\x09\xb3\x7e\x36\xbf\x6b\x1d\x29\xb3\xda\x9e\x4f\x8d\xee\xa4\xc1\xe8\xe3\x81\x1b\x91\xb6\x06\x62\x5d\xdc\xcb\x6c\x48\x5f\xbe\x29\x3b\x0c\xed\x3c\x4b\xa1\xb0\x5f\xe8\x6f\xf3\xfc\x20\xff\x17\x1a\x33\x89\x29\xb1\x47\xc4\xc3\xd3\x7f\x05\x97\xb3\xda\xc2\xa2\x0b\x34\x6f\x13\xd5\xd5\xfb\x8e\x0e\x2b\xe0\x08\xfb\x5b\x21\x49\x1c\x64\x07\x36\xf2\x34\x5a\xfd\x42\xa8\xa3\x90\xe3\x3f\x63\x7a\x3a\x05\x1f\x50\x7b\x5c\xbb\xc4\x25\x49\xa5\xd3\xff\x03\x00\x00\xff\xff\x4f\x7f\x42\xa6\xee\x09\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2542, mode: os.FileMode(420), modTime: time.Unix(1510499678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xb1\xa4\xd2\x66\x2f\x61\x65\x23\x5e\x61\x70\x9f\x49\x90\x99\x84\x75\xbb\xc7\xbb\xbb\x90\x05\xb5\xfb\x99\xe1\x7b\x64\xc5\x73\x0d\xe4\x69\x81\x55\xb4\x49\x4a\x64\xb3\x98\x91\xcb\x65\x73\x47\xf4\xb7\x44\x96\xe3\x81\xa8\x52\xda\xed\xf1\xb2\x19\x99\x2c\xf7\x91\x52\x4a\xab\xef\x5b\xeb\xf9\xf4\xf3\xd7\xe3\x32\xf8\xcd\x1c\xd2\x20\x7d\xf9\x1b\x3b\x7f\xeb\x13\x00\x00\xff\xff\x18\xfd\x24\x71\x8c\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 140, mode: os.FileMode(420), modTime: time.Unix(1510485302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1510485302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x3b\x0a\x03\x31\x0c\x44\xfb\x9c\x42\x2c\x5b\x06\x1f\x20\x90\x22\x65\xba\xc0\x9e\xc0\xc9\xca\xc6\xc5\x2a\x41\x1e\x57\x42\x77\x0f\x76\x3e\x6c\x25\x31\xcc\xbc\x67\xb6\x72\x2a\xc2\x34\x15\x79\x35\xd4\xc9\xdd\x6c\x4e\x74\x3a\x53\xe8\x6f\x49\x24\x4f\x50\x58\xda\x1d\x5c\x51\xdd\x81\x20\x71\xe3\x23\x99\xb1\xac\xdf\xce\x9c\xc2\x4d\x8b\xe0\x3a\x20\x3d\xd4\x28\x99\x47\x1e\x35\x6e\x0c\xd6\xcf\xf6\x57\xbf\x68\xae\x0b\xb4\x3d\xe0\x1e\x35\xd7\xf0\xc7\x8d\x41\xb7\xef\x14\xfb\x73\x78\x07\x00\x00\xff\xff\x7b\x4b\x7a\x7a\xb4\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 180, mode: os.FileMode(420), modTime: time.Unix(1510499686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\x5b\x3c\x03\x00\x00\xff\xff\xf9\x2c\x8a\xc2\xca\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 202, mode: os.FileMode(420), modTime: time.Unix(1510500084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1510485302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

